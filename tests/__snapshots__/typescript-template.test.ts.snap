// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TypeScript Template Generation > should generate correct config for EmailPassword + Link Phone (Express) 1`] = `
"import EmailPassword from "supertokens-node/recipe/emailpassword";
import Session from "supertokens-node/recipe/session";
import Dashboard from "supertokens-node/recipe/dashboard";
import UserRoles from "supertokens-node/recipe/userroles";
import EmailVerification from "supertokens-node/recipe/emailverification";
import Passwordless from "supertokens-node/recipe/passwordless";
import { TypeInput } from "supertokens-node/types";

export function getApiDomain() {
    const apiPort = 3001;
    const apiUrl = \`http://localhost:\${apiPort}\`;
    return apiUrl;
}

export function getWebsiteDomain() {
    const websitePort = 3000;
    const websiteUrl = \`http://localhost:\${websitePort}\`;
    return websiteUrl;
}

export const SuperTokensConfig: TypeInput = {
    supertokens: {
        // this is the location of the SuperTokens core.
        connectionURI: "https://try.supertokens.com",
    },
    appInfo: {
        appName: "SuperTokens Demo App",
        apiDomain: getApiDomain(),
        websiteDomain: getWebsiteDomain(),
    },
    // recipeList contains all the modules that you want to
    // use from SuperTokens. See the full list here: https://supertokens.com/docs/guides
    recipeList: [
        EmailPassword.init(),
        Session.init(),
        Dashboard.init(),
        UserRoles.init(),
        EmailVerification.init({
    mode: "REQUIRED"
}),
        Passwordless.init({
    contactMethod: "PHONE",
    flowType: "MAGIC_LINK"
})
    ],
};"
`;

exports[`TypeScript Template Generation > should generate correct config for EmailPassword only (Express) 1`] = `
"import EmailPassword from "supertokens-node/recipe/emailpassword";
import Session from "supertokens-node/recipe/session";
import Dashboard from "supertokens-node/recipe/dashboard";
import UserRoles from "supertokens-node/recipe/userroles";
import { TypeInput } from "supertokens-node/types";

export function getApiDomain() {
    const apiPort = 3001;
    const apiUrl = \`http://localhost:\${apiPort}\`;
    return apiUrl;
}

export function getWebsiteDomain() {
    const websitePort = 3000;
    const websiteUrl = \`http://localhost:\${websitePort}\`;
    return websiteUrl;
}

export const SuperTokensConfig: TypeInput = {
    supertokens: {
        // this is the location of the SuperTokens core.
        connectionURI: "https://try.supertokens.com",
    },
    appInfo: {
        appName: "SuperTokens Demo App",
        apiDomain: getApiDomain(),
        websiteDomain: getWebsiteDomain(),
    },
    // recipeList contains all the modules that you want to
    // use from SuperTokens. See the full list here: https://supertokens.com/docs/guides
    recipeList: [
        EmailPassword.init(),
        Session.init(),
        Dashboard.init(),
        UserRoles.init()
    ],
};"
`;

exports[`TypeScript Template Generation > should generate correct config for ThirdParty + EmailPassword + OTP Email MFA (Koa) 1`] = `
"import EmailPassword from "supertokens-node/recipe/emailpassword";
import ThirdParty from "supertokens-node/recipe/thirdparty";
import Session from "supertokens-node/recipe/session";
import Dashboard from "supertokens-node/recipe/dashboard";
import UserRoles from "supertokens-node/recipe/userroles";
import MultiFactorAuth from "supertokens-node/recipe/multifactorauth";
import AccountLinking from "supertokens-node/recipe/accountlinking";
import EmailVerification from "supertokens-node/recipe/emailverification";
import Passwordless from "supertokens-node/recipe/passwordless";
import { TypeInput } from "supertokens-node/types";

export function getApiDomain() {
    const apiPort = 3001;
    const apiUrl = \`http://localhost:\${apiPort}\`;
    return apiUrl;
}

export function getWebsiteDomain() {
    const websitePort = 3000;
    const websiteUrl = \`http://localhost:\${websitePort}\`;
    return websiteUrl;
}

export const SuperTokensConfig: TypeInput = {
    supertokens: {
        // this is the location of the SuperTokens core.
        connectionURI: "https://try.supertokens.com",
    },
    appInfo: {
        appName: "SuperTokens Demo App",
        apiDomain: getApiDomain(),
        websiteDomain: getWebsiteDomain(),
    },
    // recipeList contains all the modules that you want to
    // use from SuperTokens. See the full list here: https://supertokens.com/docs/guides
    recipeList: [
        EmailPassword.init(),
        ThirdParty.init({
    signInAndUpFeature: {
        providers: [
            {
                config: {
                    thirdPartyId: "google",
                    clients: [
                        {
                            clientId: "1060725074195-kmeum4crr01uirfl2op9kd5acmi9jutn.apps.googleusercontent.com",
                            // IMPORTANT: Override this with your client secret in production. Use environment variables.
                            clientSecret: "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"
                        }
                    ]
                }
            },
            {
                config: {
                    thirdPartyId: "github",
                    clients: [
                        {
                            clientId: "467101b197249757c71f",
                            // IMPORTANT: Override this with your client secret in production. Use environment variables.
                            clientSecret: "e97051221f4b6426e8fe8d51486396703012f5bd"
                        }
                    ]
                }
            },
            {
                config: {
                    thirdPartyId: "apple",
                    clients: [
                        {
                            clientId: "4398792-io.supertokens.example.service",
                            // IMPORTANT: Override this with your client secret in production. Use environment variables.
                            clientSecret: "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",
                            additionalConfig: {
          "keyId": "7M48Y4RYDL",
          "privateKey": "-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgu8gXs+XYkqXD6Ala9Sf/iJXzhbwcoG5dMh1OonpdJUmgCgYIKoZIzj0DAQehRANCAASfrvlFbFCYqn3I2zeknYXLwtH30JuOKestDbSfZYxZNMqhF/OzdZFTV0zc5u5s3eN+oCWbnvl0hM+9IW0UlkdA\\n-----END PRIVATE KEY-----",
          "teamId": "YWQCXGJRJL"
}
                        }
                    ]
                }
            },
            {
                config: {
                    thirdPartyId: "twitter",
                    clients: [
                        {
                            clientId: "4398792-WXpqVXRiazdRMGNJdEZIa3RVQXc6MTpjaQ",
                            // IMPORTANT: Override this with your client secret in production. Use environment variables.
                            clientSecret: "BivMbtwmcygbRLNQ0zk45yxvW246tnYnTFFq-LH39NwZMxFpdC"
                        }
                    ]
                }
            }
        ]
    }
}),
        Session.init(),
        Dashboard.init(),
        UserRoles.init(),
        MultiFactorAuth.init({
    firstFactors: ["emailpassword", "thirdparty"],
    override: {
        functions: (oI) => ({
            ...oI,
            /**
             * This function is used to determine the MFA requirements for a user during sign in / up.
             *
             * The factors returned by this function are used to determine the value of the 'v' claim in the session payload.
             * If the requirements are met (based on factors completed 'c' claim), then 'v' is true, else false.
             *
             * - Returning an empty array means MFA is not required for the user.
             * - Returning an array with FactorIds means that the user must complete one of the factors in the array.
             * - Returning an array of objects allows for more complex requirements (e.g., requiring multiple factors).
             */
            getMFARequirementsForAuth: async () => [
                {
                    // Here, we require the user to complete one of the specified second factors
                    oneOf: [
                        MultiFactorAuth.FactorIds.OTP_EMAIL
                    ],
                },
            ],
            /**
             * This function is used to determine which secondary factors a user must have setup
             * before they can complete the MFA flow.
             *
             * - Returning an empty array means the user doesn't need any specific factors set up.
             * - Returning an array of FactorIds means the user must have at least one of these factors set up.
             */
            getRequiredSecondaryFactorsForUser: async () => {
                // Here, we require the user to have setup at least one of the specified second factors
                return [MultiFactorAuth.FactorIds.OTP_EMAIL];
            },
        }),
    }
}),
        AccountLinking.init({
    shouldDoAutomaticAccountLinking: async () => ({
        shouldAutomaticallyLink: true,
        shouldRequireVerification: true
    })
}),
        EmailVerification.init({
    mode: "REQUIRED"
}),
        Passwordless.init({
    contactMethod: "EMAIL",
    flowType: "USER_INPUT_CODE"
})
    ],
};"
`;

exports[`TypeScript Template Generation > should generate correct config for ThirdParty only (Nest) 1`] = `
"import ThirdParty from "supertokens-node/recipe/thirdparty";
import Session from "supertokens-node/recipe/session";
import Dashboard from "supertokens-node/recipe/dashboard";
import UserRoles from "supertokens-node/recipe/userroles";
import { TypeInput } from "supertokens-node/types";

export function getApiDomain() {
    const apiPort = 3001;
    const apiUrl = \`http://localhost:\${apiPort}\`;
    return apiUrl;
}

export function getWebsiteDomain() {
    const websitePort = 3000;
    const websiteUrl = \`http://localhost:\${websitePort}\`;
    return websiteUrl;
}

export const SuperTokensConfig: TypeInput = {
    supertokens: {
        // this is the location of the SuperTokens core.
        connectionURI: "https://try.supertokens.com",
    },
    appInfo: {
        appName: "SuperTokens Demo App",
        apiDomain: getApiDomain(),
        websiteDomain: getWebsiteDomain(),
    },
    // recipeList contains all the modules that you want to
    // use from SuperTokens. See the full list here: https://supertokens.com/docs/guides
    recipeList: [
        ThirdParty.init({
    signInAndUpFeature: {
        providers: [
            {
                config: {
                    thirdPartyId: "google",
                    clients: [
                        {
                            clientId: "1060725074195-kmeum4crr01uirfl2op9kd5acmi9jutn.apps.googleusercontent.com",
                            // IMPORTANT: Override this with your client secret in production. Use environment variables.
                            clientSecret: "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"
                        }
                    ]
                }
            },
            {
                config: {
                    thirdPartyId: "github",
                    clients: [
                        {
                            clientId: "467101b197249757c71f",
                            // IMPORTANT: Override this with your client secret in production. Use environment variables.
                            clientSecret: "e97051221f4b6426e8fe8d51486396703012f5bd"
                        }
                    ]
                }
            },
            {
                config: {
                    thirdPartyId: "apple",
                    clients: [
                        {
                            clientId: "4398792-io.supertokens.example.service",
                            // IMPORTANT: Override this with your client secret in production. Use environment variables.
                            clientSecret: "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",
                            additionalConfig: {
          "keyId": "7M48Y4RYDL",
          "privateKey": "-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgu8gXs+XYkqXD6Ala9Sf/iJXzhbwcoG5dMh1OonpdJUmgCgYIKoZIzj0DAQehRANCAASfrvlFbFCYqn3I2zeknYXLwtH30JuOKestDbSfZYxZNMqhF/OzdZFTV0zc5u5s3eN+oCWbnvl0hM+9IW0UlkdA\\n-----END PRIVATE KEY-----",
          "teamId": "YWQCXGJRJL"
}
                        }
                    ]
                }
            },
            {
                config: {
                    thirdPartyId: "twitter",
                    clients: [
                        {
                            clientId: "4398792-WXpqVXRiazdRMGNJdEZIa3RVQXc6MTpjaQ",
                            // IMPORTANT: Override this with your client secret in production. Use environment variables.
                            clientSecret: "BivMbtwmcygbRLNQ0zk45yxvW246tnYnTFFq-LH39NwZMxFpdC"
                        }
                    ]
                }
            }
        ]
    }
}),
        Session.init(),
        Dashboard.init(),
        UserRoles.init()
    ],
};"
`;
